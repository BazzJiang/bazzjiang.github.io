<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[windows必备软件盘点]]></title>
    <url>%2F2018%2F08%2F30%2Fwindows%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%9B%98%E7%82%B9%2F</url>
    <content type="text"><![CDATA[前言&ensp;&ensp;&ensp;&ensp;以前电脑上总是一大堆的垃圾软件，在走上程序员这条路之后自己的软件洁癖也越来越高。这篇文章主要介绍能够加强windows使用体验的一系列软件,也作为自己收集的常用软件的一个盘点，万一那天重装电脑还指望着这篇文章呢！ 普通用户篇 Chrome浏览器 优点： 自动生成安全系数高的密码并保存在云端 插件丰富 相对于国内各种浏览器来说，界面简洁、速度快 前端程序员必备 火绒安全卫士 其实只要将系统升级到win10电脑完全可以裸奔，系统自带的windows defender足够用了 everything 用于替代系统自带搜索功能，速度非常快！ onedrive 实在受不了百度云的限速下载，onedrive是一个非常不错的替代选择优点： 能够自动保存Alt+PrintScreen的截图会自动保存到onedirve里面 多端同步 outlook 像qq这样的网页邮箱存在很大的弊端，即不能离线查看邮件，桌面的outlook很好的解决了这个问题 优点： 离线查看邮件 丰富的自定义分类规则 能够与微软的各种产品相互集成 Microsoft To-Do 优秀的to do list应用，方便安排你的计划，可以设计到期提醒等功能。 优点： 从win10商店下载的话会与你的微软账户绑定，只要你在别处登录你的为人账户，Microsoft To-Do里面的日程就可以同步 有道云笔记（会员付费） 网易的游戏软件部门不怎么样，但是应用软件部门做的真的不错。双11的时候有道云笔记的会有99元就可以拿下了。 优点： 支持markdown功能，同时带有markdown图床 丰富的写作背景纸 snipaste 截图工具，用于替代系统截图和qq截图 优点： 独有的贴图功能：选中文字Ctrl+C然后再按做F3即可 迅雷急速版（免费） 迅雷这家公司能把一首好牌打的稀烂我是很佩服的，完美的错过了自2010以来的各个风口。最新版迅雷臃肿庞大，完全不像装。 优点： 无广告 无需要开通会员加速 visio 微软自家的画图（矢量图）软件 优点： 模板丰富 与word等办公软件兼容性好 福昕PDF阅读器 pdf的字体渲染效果摔adobe自家的一条街 Kindle for PC 在电脑上阅读电子书最大的障碍是什么？没错我们在电子书上的笔记很难导出来做归类整理。找遍了电子书阅读器只有Kindle for PC有这个功能！ shadowsocks 这个懂得都懂，为了上外网必备的软件！ Wallpaper Engine 早在好多年前就想要一个这样的动态壁纸软件，一直找没有找到合适的。直到Wallpaper Engine上架Steam，终于了却了一个心愿。凭借steam强大的创意工坊，从此桌面上就不缺漂亮的小姐姐。 Ditto 剪切板功能加强软件，文字编辑和程序员必备 XnView 一个图片管理软件，主要是用来管理我在网络上收集的各种傻屌图的。 有道云音乐 有道词典 MathType6 公式编辑器，写论文必备 XMeters 如果你没有装360卫士，你平时又想看网速内存使情况怎么办？这个工具会帮助你 冰点下载器 用于下载百度文库里面的资料 PotPlayer 韩国人写的看视频的软件 优点： 开源，无广告 3D Mark主要用来在换硬件的时候用于自测，我的电脑有问题就是通过这个软件发现的。 7zip 一个开源的压缩/解压软件，不存在捆绑问题！ Xmind 一个用于画脑图的软件 SpaceSniffer 电脑大文件嗅探器 IDM 我是用来下载youtube上面的视频的 Win10自带的便签软件 CPUZ/GPUZ 主要是在新装机的时候看CPU和GPU信息的 程序员篇 Xshell 远程连接必备，教育版免费。 Git Bash VS Code IDEA WebStorm RedisDesktopManager 手机端 华尔街见闻App 用过同花顺、新浪财经还是华尔街见闻好用 扇贝记单词 形色 主要用于识别不认识的花和植物 大姨妈 非常实用的记录工具 – 参考资料： 实用软件与APP推荐篇 那些惊艳的App]]></content>
      <tags>
        <tag>开发环境</tag>
        <tag>装机软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins pipeline语法详解]]></title>
    <url>%2F2018%2F08%2F17%2FJenkins-pipeline%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Jenkins Pipeline 就是一系列的插件集合，可通过组合它们来实现持续集成和交付的功能。 通过Pipeline DSL为我们提供了一个可扩展的工具集，将简单到复杂的逻辑通过代码实现。 通常，我们可以通过编写Jenkinsfile将管道代码化，并且纳入到版本管理系统中。比如： 1234567891011121314151617181920212223// Declarative //pipeline &#123; agent any ① stages &#123; stage('Build') &#123; ② steps &#123; ③ sh 'make' ④ &#125; &#125; stage('Test')&#123; steps &#123; sh 'make check' junit 'reports/**/*.xml' ⑤ &#125; &#125; stage('Deploy') &#123; steps &#123; sh 'make publish' &#125; &#125; &#125;&#125; 12345678910111213// Script //node &#123; stage('Build') &#123; sh 'make' &#125; stage('Test') &#123; sh 'make check' junit 'reports/**/*.xml' &#125; stage('Deploy') &#123; sh 'make publish' &#125;&#125; ① agent 指示Jenkins分配一个执行器和工作空间来执行下面的Pipeline② stage 表示这个Pipeline的一个执行阶段③ steps 表示在这个stage中每一个步骤④ sh 执行指定的命令⑤ junit 是插件junit[JUnit plugin]提供的一个管道步骤，用来收集测试报告 管道名词几个重要的名词，讲一下它们是什么意思： Step 一个简单的执行步骤，比如执行一个sh脚本 Stage 将你的命令组织成一个更高一层的逻辑单元 Node 指定这些任务在哪执行 Stage和Step可以放到一个Node下面执行，不指定就默认在master节点上面执行。 另外Node和Step也能组合成一个Stage。 定义管道有两种定义管道的方式，一种是通过Web UI来定义，一种是直接写Jenkinsfile。推荐后面一种，因为可以纳入版本管理系统。 Web UI方式这里先介绍第一种方式，通过Web UI，首先点击“新建”： 填写一个名字，然后选择Pipeline 点击“OK”后，在Script中写一个简单的命令： 保存后，点击左侧的“立即构建”： 然后在“Build History”下面点击“#1”进入此次构建详情，再点击左侧的“Console Output”查看输出： 我们看到了打印出来的“hello world”说明成功运行。 上面的例子演示了通过Web UI创建的一个最基本的管道执行成功的案例。使用2个步骤： 12345// Script //node &#123; ① echo 'Hello World' ②&#125;// Declarative not yet implemented // ① node 在Jenkins环境中分配一个执行器和工作空间② echo 在控制台输出一个简单的字符串 Jenkinsfile方式上面通过Web UI方式只适用于非常简单的任务，而大型复杂的任务最好采用Jenkinsfile方式并纳入SCM管理。 这次我选择从SCM中的Jenkinsfile来定义管道。 我这里配置了一个git仓库位置，然后我在该项目根目录放一个Jenkinsfile，其实就是我上一篇里演示的。 Poll SCM 触发器选择Build Trigger为Poll SCM，定时检查是否有push操作，这里我设置每隔2分钟检查一次。 Push触发器这个触发器我更加推荐，因为是实时的，但是需要先配置gitlab的Webhook。 选择1Build when a change is pushed to GitLab. GitLab CI Service URL: http://192.168.217.161:8080/project/scm-example 复制后面那个URL，然后登录gitlab项目打开项目配置Web Hook，如果没有配置SSL可以将证书检查取消： 增加后可点击下面的测试，上面显示：钩子执行成功：HTTP 200则表示没问题。 然后再来jenkins里面配置push触发器，还能选择你要过滤那些分支，比如我只响应master分支上面的push操作。可以这样： push钩子的大致流程是这样的： push代码，Gitlab触发hook，访问Jenkins提供的api Jenkins Branch Filter系统判断自己需要处理的分支是否有改动，如果有开始构建 运行构建脚本然后我再来测试下，修改代码，提交后push到远程仓库中，看到效果正常触发了： Tips: 每个Jenkinsfile文件都应该以#!groovy为开头第一行 使用Jenkinsfile接下来详细介绍一下怎样编写Jenkinsfile来完成各种复杂的任务。 Pipeline支持两种形式，一种是Declarative管道，一个是Scripted管道。 一个Jenkinsfile就是一个文本文件，里面定义了Jenkins Pipeline。 将这个文本文件放到项目的根目录下面，纳入版本系统。 部署三阶段一般我们的持续交付都有三个部分：Build、Test、Deploy，典型写法：123456789101112131415161718192021222324252627282930313233343536// Declarative //pipeline &#123; agent any stages &#123; stage('Build') &#123; steps &#123; echo 'Building..' sh 'make' archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true &#125; &#125; stage('Test') &#123; steps &#123; echo 'Testing..' /* `make check` returns non-zero on test failures, * using `true` to allow the Pipeline to continue nonetheless */ sh 'make check || true' ① junit '**/target/*.xml' ② &#125; &#125; stage('Deploy') &#123; when &#123; expression &#123; /*如果测试失败，状态为UNSTABLE*/ currentBuild.result == null || currentBuild.result == 'SUCCESS' ① &#125; &#125; steps &#123; echo 'Deploying..' sh 'make publish' &#125; &#125; &#125;&#125; 环境变量Jenkins定了很多内置的环境变量，可在文档localhost:8080/pipeline-syntax/globals#env找到， 通过env直接使用它们： echo “Running ${env.BUILD_ID} on ${env.JENKINS_URL}”设置环境变量：1234567891011121314151617// Declarative //pipeline &#123; agent any environment &#123; CC = 'clang' &#125; stages &#123; stage('Example') &#123; environment &#123; DEBUG_FLAGS = '-g' &#125; steps &#123; sh 'printenv' &#125; &#125; &#125;&#125; 使用多个agent123456789101112131415161718192021222324252627282930313233343536373839404142// Declarative //pipeline &#123; agent none stages &#123; stage('Build') &#123; agent any steps &#123; checkout scm sh 'make' stash includes: '**/target/*.jar', name: 'app' ① &#125; &#125; stage('Test on Linux') &#123; agent &#123; ② label 'linux' &#125; steps &#123; unstash 'app' ③ sh 'make check' &#125; post &#123; always &#123; junit '**/target/*.xml' &#125; &#125; &#125; stage('Test on Windows') &#123; agent &#123; label 'windows' &#125; steps &#123; unstash 'app' bat 'make check' ④ &#125; post &#123; always &#123; junit '**/target/*.xml' &#125; &#125; &#125; &#125;&#125; 上面的例子，在任一台机器上面做Build操作，并通过stash命令保存文件，然后分别在两台agent机器上面做测试。 注意这里所有步骤都是串行执行的。 Multibranch Pipeline多分支管道可以让你在同一个项目中，对每个分支定义一个执行管道。Jenkins或自动发现、管理并执行包含Jenkinsfile文件的分支。 这个在前面一篇已经演示过怎样创建这样的Pipeline了，就不再多讲。 Pipeline语法先讲Declarative Pipeline，所有声明式管道都必须包含在pipeline块中：123pipeline &#123; /* insert Declarative Pipeline here */&#125; 块里面的语句和表达式都是Groovy语法，遵循以下规则： 最顶层规定就是pipeline { } 语句结束不需要分好，一行一条语句 块中只能包含Sections, Directives, Steps或者赋值语句 属性引用语句被当成是无参方法调用，比如input实际上就是方法input()调用接下来我详细讲解下Sections, Directives, Steps这三个东西 SectionsSections在声明式管道中包含一个或多个Directives, Steps postpost section 定义了管道执行结束后要进行的操作。支持在里面定义很多Conditions块： always, changed, failure, success 和 unstable。 这些条件块会根据不同的返回结果来执行不同的逻辑。 always：不管返回什么状态都会执行 changed：如果当前管道返回值和上一次已经完成的管道返回值不同时候执行 failure：当前管道返回状态值为”failed”时候执行，在Web UI界面上面是红色的标志 success：当前管道返回状态值为”success”时候执行，在Web UI界面上面是绿色的标志 unstable：当前管道返回状态值为”unstable”时候执行，通常因为测试失败，代码不合法引起的。在Web UI界面上面是黄色的标志12345678910111213141516// Declarative //pipeline &#123; agent any stages &#123; stage('Example') &#123; steps &#123; echo 'Hello World' &#125; &#125; &#125; post &#123; ① always &#123; ② echo 'I will always say Hello again!' &#125; &#125;&#125; stages由一个或多个stage指令组成，stages块也是核心逻辑的部分。 我们建议对于每个独立的交付部分（比如Build,Test,Deploy）都应该至少定义一个stage指令。比如：1234567891011// Declarative //pipeline &#123; agent any stages &#123; ① stage('Example') &#123; steps &#123; echo 'Hello World' &#125; &#125; &#125;&#125; steps在stage中定义一系列的step来执行命令。1234567891011// Declarative //pipeline &#123; agent any stages &#123; stage('Example') &#123; steps &#123; ① echo 'Hello World' &#125; &#125; &#125;&#125; Directivesjenkins中的各种指令 agentagent指令指定整个管道或某个特定的stage的执行环境。它的参数可用使用： any - 任意一个可用的agent none - 如果放在pipeline顶层，那么每一个stage都需要定义自己的agent指令 label - 在jenkins环境中指定标签的agent上面执行，比如agent { label ‘my-defined-label’ } node - agent { node { label ‘labelName’ } } 和 label一样，但是可用定义更多可选项 docker - 指定在docker容器中运行 dockerfile - 使用源码根目录下面的Dockerfile构建容器来运行 environment - environment定义键值对的环境变量 1234567891011121314151617// Declarative //pipeline &#123; agent any environment &#123; ① CC = 'clang' &#125; stages &#123; stage('Example') &#123; environment &#123; ② AN_ACCESS_KEY = credentials('my-prefined-secret-text') ③ &#125; steps &#123; sh 'printenv' &#125; &#125; &#125;&#125; options还能定义一些管道特定的选项，介绍几个常用的： skipDefaultCheckout - 在agent指令中忽略源码checkout这一步骤。 timeout - 超时设置options { timeout(time: 1, unit: ‘HOURS’) }retry - 直到成功的重试次数options { retry(3) } timestamps - 控制台输出前面加时间戳options { timestamps() } parameters参数指令，触发这个管道需要用户指定的参数，然后在step中通过params对象访问这些参数。1234567891011121314// Declarative //pipeline &#123; agent any parameters &#123; string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?') &#125; stages &#123; stage('Example') &#123; steps &#123; echo "Hello $&#123;params.PERSON&#125;" &#125; &#125; &#125;&#125; triggers触发器指令定义了这个管道何时该执行，一般我们会将管道和GitHub、GitLab、BitBucket关联， 然后使用它们的webhooks来触发，就不需要这个指令了。如果不适用webhooks，就可以定义两种cron和pollSCM cron - linux的cron格式triggers { cron(‘H 4/* 0 0 1-5’) } pollSCM - jenkins的poll scm语法，比如triggers { pollSCM(‘H 4/* 0 0 1-5’) } 1234567891011121314// Declarative //pipeline &#123; agent any triggers &#123; cron('H 4/* 0 0 1-5') &#125; stages &#123; stage('Example') &#123; steps &#123; echo 'Hello World' &#125; &#125; &#125;&#125; stagestage指令定义在stages块中，里面必须至少包含一个steps指令，一个可选的agent指令，以及其他stage相关指令。1234567891011// Declarative //pipeline &#123; agent any stages &#123; stage('Example') &#123; steps &#123; echo 'Hello World' &#125; &#125; &#125;&#125; tools定义自动安装并自动放入PATH里面的工具集合1234567891011121314// Declarative //pipeline &#123; agent any tools &#123; maven 'apache-maven-3.0.1' ① &#125; stages &#123; stage('Example') &#123; steps &#123; sh 'mvn --version' &#125; &#125; &#125;&#125; 注：① 工具名称必须预先在Jenkins中配置好了 → Global Tool Configuration. 内置条件 branch - 分支匹配才执行 when { branch ‘master’ } environment - 环境变量匹配才执行 when { environment name: ‘DEPLOY_TO’, value: ‘production’ } expression - groovy表达式为真才执行 expression { return params.DEBUG_BUILD } }1234567891011121314151617// Declarative //pipeline &#123; agent any stages &#123; stage('Example Build') &#123; steps &#123; echo 'Hello World' &#125; &#125; stage('Example Deploy') &#123; when &#123; branch 'production' &#125; echo 'Deploying' &#125; &#125;&#125; Steps这里就是实实在在的执行步骤了，每个步骤step都具体干些什么东西， 前面的Sections、Directives算控制逻辑和环境准备，这里的就是真实执行步骤。 这部分内容最多不可能全部讲完，官方Step指南 包含所有的东西。 Declared Pipeline和Scripted Pipeline都能使用这些step，除了下面这个特殊的script。 一个特殊的step就是script，它可以让你在声明管道中执行脚本，使用groovy语法，这个非常有用：123456789101112131415161718192021222324// Declarative //pipeline &#123; agent any stages &#123; stage('Example') &#123; steps &#123; echo 'Hello World' script &#123; def browsers = ['chrome', 'firefox'] for (int i = 0; i &lt; browsers.size(); ++i) &#123; echo "Testing the $&#123;browsers[i]&#125; browser" &#125; &#125; script &#123; // 一个优雅的退出pipeline的方法，这里可执行任意逻辑 if( $VALUE1 == $VALUE2 ) &#123; currentBuild.result = 'SUCCESS' return &#125; &#125; &#125; &#125; &#125;&#125; 最后列出来一个典型的Scripted Pipeline：1234567891011121314151617node('master') &#123; checkout scm stage('Build') &#123; docker.image('maven:3.3.3').inside &#123; sh 'mvn --version' &#125; &#125; stage('Deploy') &#123; if (env.BRANCH_NAME == 'master') &#123; echo 'I only execute on the master branch' &#125; else &#123; echo 'I execute elsewhere' &#125; &#125;&#125; 可以看到，Scripted Pipeline没那么多东西，就是定义一个node， 里面多个stage，里面就是使用Groovy语法执行各个step了，非常简单和清晰，也非常灵活。 两种Pipeline比较Declarative Pipeline相对简单，而且不需要学习groovy语法，对于日常的一般任务完全够用， 而Scripted Pipeline可通过Groovy语言的强大特性做任何你想做的事情。 Blue OceanJenkins最新整了个Blue Ocean出来，我觉得有必要用单独来介绍一下这个东西。 Blue Ocean重新设计了用户使用Jenkins的方式，给我们带来极大的方便，同时也兼容自由风格的任务定义。 安装可以在当前Jenkins环境下面安装Blue Ocean插件，具体步骤： 登录Jenkins服务器 侧边栏点击”Manage Jenkins” -&gt; “Manage Plugins” 选择”Available”然后使用搜索框查找”Blue Ocean” 在安装列点击checkbox 选择”不重启安装”或”下载并重启后安装” 启动安装好后会出现一个”Open Blue Ocean”的按钮，点击即可进入蓝色海洋： FAQ如果遇见for (item : items)报错NotSerializableException或者Unserializable iterator等等错误， 就将foreach循环改成传统C语言的循环： for (int i = 0; i &lt; cluster_nodes.size(); i++) { node = cluster_nodes[i]}]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近期玩的一些游戏的碎碎念]]></title>
    <url>%2F2018%2F05%2F01%2F%E8%BF%91%E6%9C%9F%E7%8E%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[这是一个游戏迷对近期玩的游戏的总结 古墓丽影9,10这个系列也是早闻大名，对于游戏玩的不多的人来说最熟悉的莫过于安吉莉娜朱莉主演的电影《古墓丽影了》，我是在前年这个系列大打折的时候一口气买下了9和10；古墓丽影9是去年通关的，昨天(4月30日)通关了10代。 从古墓丽影的9代开始，水晶动力工作室对系列进行进行了重启，并借鉴了顽皮狗的神秘海域系列采取了电影化叙事的方式。古墓丽影9是我第一次玩这个电影化叙事的游戏，初次接触真的很震撼：好莱坞式的剧本，出色的演出效果，各种惊险刺激的场景，漂亮的劳拉小姐姐。 巫师3巫师3也是买了很久了，结果一直拖拖拖没有通关。总结起来我对巫师三有如下的评测优点： 巫师3的画面采取的是油画渲染的方式，其风景那是漂亮的没有话说。 巫师3的剧情 缺点： 巫师3的主角在跑步和近屋子的时候，人物对输入延迟比较大，给人一种很僵硬的感觉。 昆特牌，很多玩家喜欢在游戏里面玩昆特牌的小游戏，我恰恰相反。我认为昆特牌太喧宾夺主了，而且不是很好玩。 塞尔达传说:荒野之息我可是为了一个游戏买了一个switch的人，在别人看来我一定是疯了，还好女朋友没有说什么。一路玩下下来，我认为塞尔达能够在游戏大作频出的2017年（女神异闻录5，神界原罪2，马里奥奥德赛，地平线：零之曙光）称神的原因在于它交互性以及游戏给予的反馈。 艾迪芬奇的记忆通关时间2小时左右，非常短小的独立游戏，基本上没有游戏性，完全就是一个行走模拟器。主要优点在于： 叙事方式很独特，尤其是游戏里面字幕呈现的方式。 黑暗之魂2,黑暗之魂3黑魂2和黑魂3除开其难度，游戏性真的非常高。我这里主要想说，黑魂2一块盾能够走遍天下，黑魂3就行不通了然后一直被卡关，现在被卡在教宗沙力万，整个人都快疯了。 传送门1,传送门2早闻大名，FPS类型的射击游戏确实还是第一次接触。 其它的一些碎碎念现在的市场上的游戏包括魔兽世界等普遍存在一个问题：都太不尊重玩家的时间，在进入社会之后我不会再有时间很精力天天刷日常，一遍遍做重复劳动太无聊了。这种类型的游戏注定只能存活制作水平最高的那几个，其余都得死。]]></content>
      <tags>
        <tag>游戏评测</tag>
        <tag>游戏心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Docker里面安装Jenkins(原创翻译)]]></title>
    <url>%2F2018%2F04%2F20%2F%E5%9C%A8Docker%E9%87%8C%E9%9D%A2%E5%AE%89%E8%A3%85Jenkins-%E7%BF%BB%E8%AF%91%2F</url>
    <content type="text"><![CDATA[前言实习的公司里面利用Jenkins用作持续集成(CI)的工作,在公司里面的工作流程是这样的: 开发人员提交代码到公司的Git仓库上面(Bitbuket) 开发人员登录Jenkins并新建一个job:Jenkins会自动从你设置好的Git仓库上面抓取代码,并按照Jenkinsfile的流程进行部署工作 这里做的好处在于大大减少了开发人员的工作量,尤其是减少重复的部署工作。于是琢磨着自己搭建一个Jenkins的服务器。最开始是按照网上的各种杂七杂八的教程来,在这里面踩了很多坑,包括: Linux安装源的Docker版本过低,在Jenkins安装好之后进行操作时候会报Docker API版本过低的警告,无法进一步操作。 安装的Jenkins所选择的版本不对。 所以呢，得出的结论是:能看官方文档的还是看官方文档,二手资料坑太多了 本文章内容翻译至官方文档,所有删改。 https://docs.docker.com/install/linux/docker-ce/centos/ https://jenkins.io/doc/book/installing/#downloading-and-running-jenkins-in-docker 安装Docker CE(Docker社区版)卸载老版本的Docker老版本的Docker叫docker或者docker-engine。如果它们存在的话需要卸载他们以及他们相关的依赖12345678910$ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 在/var/lib/docker/这个路径下面包含了镜像,容器,以及数据卷等数据仍然是保留着的。现在Docker CE的包更名为docker-ce 安装Docker CE这里推荐的是设置Docker的安装仓库并从仓库进行安装,因为这样安装更加简单并且易于升级。 安装必要的包。 123$ sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 设置稳定的仓库 123$ sudo yum-config-manager \--add-repo \https://download.docker.com/linux/centos/docker-ce.repo 安装docker ce 1sudo yum install docker-ce 开启docker服务 1sodo systemtl start docker 验证docker是否正确安装 1docker -v 在docker里面安装Jenkins官方推荐的Jenkins镜像是 jenkinsci/blueocean,而不是网上大多数人说的Jenkins1234567891011121314#新建用于存放数据的文件夹mkdir -p /data/jenkins-data#拉取镜像docker pull jenkinsci/blueocean:latest#运行docker run \ -u root \ --rm \ -d \ -p 8080:8080 \ -p 50000:50000 \ -v /data/jenkins-data:/var/jenkins_home \ -v /var/run/docker.sock:/var/run/docker.sock \ jenkinsci/blueocean 检验Jenkins是否成功安装在浏览器上面输入http://localhost:8080 ;初次安装需要密码,初始化密码在/var/jenkins_home/secrets/initialAdminPassword文件里面,映射到宿主主机上面之后路径为:/data/jenkins-data/secrets/initialAdminPassword]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot和Docker集成(翻译)]]></title>
    <url>%2F2018%2F04%2F19%2FSpring-Boot%E5%92%8CDocker%E9%9B%86%E6%88%90(%E7%BF%BB%E8%AF%91)%2F</url>
    <content type="text"><![CDATA[本文翻译至: https://spring.io/guides/gs/spring-boot-docker/ 有所删改 你需要什么? 大约15分钟 JDK1.8+ Maven3.2+ 一个IDEA(IntelliJ IDEA等) 一台装有docker的机器 利用Maven进行构建构建如下的项目结构: 在pom文件中添加如下内容: 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;gs-spring-boot-docker&lt;/artifactId&gt; &lt;version&gt;0.1.0&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 这是一个典型的spring boot的项目架构 pom文件中添加了一个构建插件: spring-boot-maven-plugin,这个插件提供了如下功能 它会收集classpath下面所有jar包并构建成为一个单独的可执行的jar包,这对于多模块项目来说尤其方便。 它会搜索public static void main()作为可执行类的入口方法。 添加Java代码现在新建Java文件并添加如下内容:src/main/java/hello/Application.java123456789101112131415161718192021package hello;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class Application &#123; @RequestMapping("/") public String home() &#123; return "Hello Docker World"; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125; 这个类的功能很简单,它通过@SpringBootApplication注解创建了spring boot启动类,并利用@RestController注解了一个路由方法home(),并返回”Hello Docker World”。编译并允许,在浏览器中输入http://localhost:8080/ ,就可以看见网页上面打印出信息。 添加Dockerfiledocker会利用Dockerfile构建docker镜像,项目的根目录下面添加如下内容: 12345FROM openjdk:8-jdk-alpineVOLUME /tmpARG JAR_FILEADD $&#123;JAR_FILE&#125; app.jarENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"] 说明 我们添加了一个VOLUME指向”/tmp”因为Spring Boot应用程序在Tomcat上面创建的默认工作目录。这个语句的效果将会在宿主主机的”/var/lib/docker”里面创建一个临时的文件并将它链接到容器的目录”/tmp”。这个步骤是可选的,但是对于要进行文件读写的应用程序是必须的。 为了减少Tomcat的启动时间,我们添加了一个系统属性指向”/dev/urandom” 利用Maven构建Docker镜像为了构建一个Docker镜像我们需要向pom文件中添加一个新的插件123456789101112131415161718&lt;properties&gt; &lt;docker.image.prefix&gt;springio&lt;/docker.image.prefix&gt;&lt;/properties&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.6&lt;/version&gt; &lt;configuration&gt; &lt;repository&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/repository&gt; &lt;buildArgs&gt; &lt;JAR_FILE&gt;target/$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt; &lt;/buildArgs&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 这个配置主要做了如下三件事 配置了docker仓库和镜像的名字,该项目的最终构建的镜像名字如下:springio/gs-spring-boot-docker 配置有用于构建Docker镜像的jar包的名字 镜像的tag,如果没有指定的话默认为latest 完整的配置参考:https://github.com/spotify/dockerfile-maven。在构建之前利用命令docker ps确认你电脑上面的docker已经运行了起来 构建运行在IntelliJ里面利用maven进行构建,再利用刚刚构建好的docker镜像创建一个容器并运行1docker run -p 8080:8080 -t springio/gs-spring-boot-docker]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[职业规划]]></title>
    <url>%2F2018%2F04%2F01%2F%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[今天4月1号，算下来我在在Synnex待了5个月了。在这个5个月还是学到蛮多关于Java的知识。主要集中在下面几点: spring boot:公司在全面进行向微服务架构的转型，spring boot天生和微服务联系紧密。 spring data jpa:和mybatis一样一个持久层的访问框架。 spring框架的基础知识 mysql和sql语言的进一步学习感想: 在这几个月来，深感我如果只是满足于此最终会被淘汰。至少就开发ERP系统而言，Java的门槛太低了。ERP系统的难点在于业务逻辑而非技术。 必须想一条转型的后路，我比较认同的是游戏程序员。但是现阶段而言，不适合进入游戏行业，除非自己能进入网易或者腾讯。]]></content>
      <tags>
        <tag>生活总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搭建]]></title>
    <url>%2F2017%2F12%2F31%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前言&ensp;&ensp;&ensp;&ensp;早在几年前就有一个搭建自己博客的计划，当时还没有来计算机也没有系统的学习计算机相关的知识，缺乏很多知识储备，只能借助于新浪博客之类的一些东西，自己也在上面写了一些东西，但最后都不了了之了。现在我已经有了这个能力搭建一个属于一个自己的博客，由于自己的拖延症一直拖到现在才开始动手，最开始的计划是用My-Blog来进行搭建，这是一个用springboot写的博客项目，经过几天的使用下来，发现存在很多问题，其中之一就是功能过于简陋，有一些需求无法满足。仔细思考一下我需要的博客是这个样子： 支持markdown语法书写博客 支持代码高亮，毕竟我是一个程序员 有漂亮的主题在这之后经过一番调研，可以用来作为私人博客的产品有如下这些: Hexo博客，这是一个静态的博客。什么是静态博客呢？静态博客指的是博客系统没有后台，不需要数据库只由html,css以及js组成。 优点： 搭建简单 缺点： 相对于动态博客来说，有一些功能缺乏 Hexo博客的搭建参考这里 WordPress博客，这是一个PHP做的产品。 优点： 使用人数众多 功能齐全 丰富的插件 丰富的主题 缺点： 整个系统过于臃肿 各种插件质量参差不齐，插件之间相互可能有冲突，插件和博客之间时常版本不兼容； 原生不支持markdown语法，没有个几个好的支持markdown的插件 WordPress博客的搭建参考这里：WordPress博客搭建 Ghost博客，这个是wordpress前员工做的东西，用的是nodejs。 优点: 支持markdown语法缺点: 部署复杂 功能简单，我要用这个我为什么不用Hexo呢？ Ghost博客的搭建参考这里：Ghost博客搭建 这里假设你已经具备如下的知识： 知道如何购买了一台云主机(VPS)，阿里云/腾讯云随意。学生党可以去淘宝去找更便宜的云主机提供商，我用的是速云。 知道如何购买了一个域名，我购买域名用的的网站是Godaddy。 熟悉基本的Linux命令的使用，如： 1cd、yum、wget、ps、vim]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ghost1.8博客搭建]]></title>
    <url>%2F2017%2F12%2F30%2FGhost1-8%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[请注意Ghost博客的1.8版本官方提供了一个Ghost博客的安装工具叫做:ghost-cli，此工具有一些Bug，安装过程会出一些很棘手的问题，不建议用次工具 环境搭建安装Node&ensp;&ensp;&ensp;&ensp;我购买云主机上安装的CentOS系统，由于CentOS安装源上面的nodejs版本太低，所以最好用用其他方法来安装一个更高版本的nodejs。Linux的使用经验告诉我们，最好不要选择自己编译安装，（高版本的nodejs编译需要高版本的gcc，我们又要去安装高版本的gcc，gcc的安装又是一个复杂的话题，总之问题无穷尽也）。下面我们采用两种方法来安装nodejs 我们这里采用nodejs的一个版本管理工具叫做nvm来安装nodejs。这样安装的nodejs方便管理，可在机器上安装各个版本的nodejs并可随意切换。但是请注意如果随后你采用ghost-cli来安装Ghost博客的话，请不要用此方法，原因参考这里 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash 运行下列命令检查nvm是否安装成功 1nvm --version 接下来我们就来安装nodejs，我选择安装nodejs的v0.12.18本版运行下列命令: 1nvm install 0.12.18 之后运行下面的命令检查nodejs的安装是否完成 1node -v 下面是nvm操作的一些基本命令： 123456789#安装最新稳定把本的nodejsnvm install stable#列举机器上已经安装的nodejs版本nvm list#安装特定的nodejs版本nvm install 0.12.18#卸载特定的nodejs版本nvm deactivate 0.12.18nvm uninstall 0.12.18 采用nodejs官方推荐的方法安装，那么好的方法国内很多博客都没有提过。 12345curl --silent --location https://rpm.nodesource.com/setup_6.x | sudo bash -sudo yum -y install nodejssudo yum install gcc-c++ make #可选 这里我们要用淘宝的cpm代替原有的npm，否则某些安装包下载不了 1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装nginxnginx起一个反向代理的作用首先在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo 1vim /etc/yum.repos.d/nginx.repo 写入以下内容： 12345[nginx] name=nginx repo baseurl= http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 初始化过后执行下列命令： 1234#安装yum install nginx -y#检查是否安装成功nginx -v 在安装完成nginx之后需要修改nginx的配置文件，nginx的配置文件位于/etc/nginx/conf.d下面。运行下列命令: 1234#进入conf.d目录cd /etc/nginx/conf.d#新建ghost.conf文件vim ghost.conf 复制粘贴下面的内容： 123456789server &#123; listen 80; server_name jiangkedev.com www.jiangkedev.com; #这里写你的域名或者ip地址 location / &#123; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368;#这里是Ghost博客的运行端口 &#125;&#125; 保存退出，重启nginx： 12345#检查nginx配置文件是否正确nginx -t#配置正确的话就可以启动nginx服务service nginx restart#CentOS 7：systemctl restart nginx 浏览器运行输入：127.0.0.1:80查看nginx是否启动。 安装mysql&ensp;&ensp;&ensp;&ensp;安装Mysql的时候请注意你的云服务器是CentOS6系统还是CentOS7系统，对于CentOS7系统请注意：由于CentOS7系统抛弃了mysql改用mariadb，所以安装mysql之前你需要先卸载系统上mariadb相关的东西,如果不卸载的话会出下面的错误：为此你要像下面这样做： 123# yum list installed |grep mariadbmariadb-libs.x86_64 1:5.5.52-1.el7 @base## yum remove mariadb-libs.x86_64 Mysql的安装也有两种方法，一种是用CentOS的yum源上面的5.1版本mysql。安装方法如下： 12345678#安装mysqlyum install -y mysql-server#开启mysql服务 service mysqld start# 设置开机启动Mysql chkconfig mysqld on#这里设置你的mysql密码 mysqladmin -u root -p password ××× 如果你想安装更高版本的mysql，你需要采取下面的方法(不建议采取编译安装) 1234#CentOS6系统wget https://dev.mysql.com/get/mysql57-community-release-el6-11.noarch.rpm yum localinstal mysql57-community-release-el6-11.noarch.rpmyum install mysql-community-server 如果你是CentOS7系统则使用: 123456#CentOS7系统wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm yum localinstal mysql57-community-release-el6-11.noarch.rpmyum install mysql-community-serversystemctl enable mysqld.servicesystemctl start mysqld.service 请注意mysql5.7之后初始密码不为空，默认的初始密码位于/var/log/mysqld.log下面,设置初始密码的方式也变了可以用cat /var/log/mysqld.log|grep password查看初始密码。并且你需要用初始密码登录之后重新设置密码，不然会报错，下面是设置新的密码的过程（这里的关键在于初始密码必须符合规范:==设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。==）： 1mysql&gt; SET PASSWORD = PASSWORD('your_new_password'); 如果修改的密码不符合策略会报错：在这之后如果你需要修改成为一个简单的密码，则需要修改密码策略。如何修改参考这里 编辑mysql的配置文件，该文件位于/etc/my.cnf将内容更改如下。主要作用是防止中文乱码 1234567891011121314151617181920[mysqld]character-set-server=utf8init_connect=&apos;SET NAMES utf8&apos;collation-server=utf8_general_cidatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockuser=mysql# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0[mysqld_safe]default-character-set=utf8log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid[client]default-character-set=utf8[mysql]default-character-set=utf8 保存之后重启mysql服务 12service mysqld restart#systemctl restart mysqld.service 以root身份登录数据库，并建立一个数据库 1create database ×××× 安装ghost1.8.1 建议去Ghost1.8的下载地址 123#装zip的解压软件yum install -y unzipunzip Ghost-1.8.1.zip -d /Blog/Ghost1.8.1 123cd /Blog/Ghost1.8.1#这里一定要用cnpm代替npm,不然很多包无法下载cnpm install 配置文件更改这一步非常关键,我安装的版本最Ghost博客的1.8版本，这个啊把那本相对0.7版本配置文件改成了纯json格式而非原来的js文件。配置文件位于Ghost的根目录之下名字叫做config.production.json，需要自己创建这里贴一个json的配置文件。内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; "url": "http://www.jiangkedev.com", //这里写你的谷歌邮箱，以提供邮件服务 "mail": &#123; "transport": "SMTP", "options": &#123; "auth": &#123; "user": "",//账号 "pass": ""//密码 &#125; &#125; &#125;, //这里配置mysql数据库 "database": &#123; "client": "mysql", "connection": &#123; "host":"127.0.0.1", "user":"root",//用户 "password":"",//密码 "database":"",//数据库名称 "charset":"utf8"//编码 &#125;, "debug": "false" &#125;, "server": &#123; "host": "127.0.0.1", "port": "2368" &#125;, //储存配置，这里需要你安装相应的插件。 "storage": &#123; "active": "qn-store", "qn-store": &#123; "accessKey": "", "secretKey": "", "bucket": "", "origin": "", "fileKey": &#123; "safeString": "true", "prefix": "YYYYMM/" &#125; &#125; &#125;&#125; 初始化数据库在上面这些都做完之后，如果你直接运行node index.js会遇到下面的错误这就需要你初始化你的数据库： 12cnpm install -g knex-migratorknex-migrator init 运行node index.js就可以运行你的博客了。最后运行起来的效果是这样的： 部署ghost为了让你的ghost博客能够一直运行，我们需要用到一个工具叫做forever。 通过cnpm install forever -g安装 forever 为了让 forever 从 Ghost 安装目录运行，输入 NODE_ENV= production forever start index.js，记住一定要以产品模式启动。 通过 forever stop index.js 停止 Ghost 通过 forever list 或者ps -ef|grep index检查 Ghost 当前是否正在运行 参考资料：mysql初始密码及其设置 ghost官网 ghost博客安装问题]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[令人印象深刻的游戏台词]]></title>
    <url>%2F2017%2F12%2F30%2F%E4%BB%A4%E4%BA%BA%E5%8D%B0%E8%B1%A1%E6%B7%B1%E5%88%BB%E7%9A%84%E6%B8%B8%E6%88%8F%E5%8F%B0%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[这是我是知乎上的回答，搬运过来作为一个记录认真整理一下，列出一些自己印象比较深刻（洗脑）的台词，当自己中二病犯的时候都不时会在心中默念的台词： 《星际争霸2》 我即是虫群 —来自星际争霸2虫群之心CG最后凯瑞甘的台词，虽然不玩星际争霸，但是我把星际的CG都补了一遍，这句台词配合CG里面的场景显得特别霸气。 《魔兽世界》 战火为何而燃，秋叶为何而落。天性不可夺，吾辈心中亦有惑。 怒拳为谁握，护国安邦惩奸恶，道法自然除心魔。 战无休而祸不息，吾辈何以为战？ ——来自熊猫人之谜CG，这个也是印象深刻。第一次玩魔兽世界是熊猫人版本末期，由于当时学校校园网下载速度太慢，因此呢在下载过程中会反复播放这段CG，当时简直被惊艳到了。之后我也反复看了这个CG很多篇，首先和湾湾的翻译相对比，我们的翻译水平很有中国风的韵味同时也很契合熊猫人版本的主题，做到了翻译中信达雅。 愿圣光指引你 ——一句很普通的话来自于艾尔文森林里面的NPC，但是NPC的话配上漂亮的艾尔文森林的风景让当时没有玩过网游的我觉得特别有feeling。 巫妖王：一切都结束了吗？我的父亲米奈希尔国王：结束了，王权没有永恒，我的孩子巫妖王：。。。我的眼前只有一篇黑暗 ——来自ICC副本，刷了N遍巫妖王直到AFK都没有出无敌；好多次打完的时候总会反复看这里的过场动画，觉得非常经典。 还有其它一些 旅行者，愿风指引你的道路 魔兽世界–种族并不能代表荣耀，我见过最高尚的兽人，也见过最卑劣的人类 ——来自一个很感人的任务《爱与家庭》，这句话弗丁说的，我玩wow的时候这个任务已经删掉了，没有办法亲自体验却是遗憾。说到弗丁，这里顺便批判一下现任的魔兽剧情设计师弗洛尔：对魔兽的剧情竭泽而渔，先是7.0害死弗丁、瓦王、沃金（主要是这些人死的毫无意义，在老人物牺牲的同时也没有塑造新的人物，这对魔兽剧情今后的发展很不利），然后雪藏吉安娜，结果版本末期我们竟然就这样封印的萨格拉斯。 《暗黑破坏神3》 你无权审判，我即是正义!—来自于天堂之上泰瑞尔和英普瑞斯的吵架，我就是看来这个我才入了暗黑3的坑的。 《黑暗之魂》 Ashen one, hearest thou my voice still? —来自与黑暗之魂3灭火结局，我喜欢黑暗之魂的一点就是：能让我认识到自己只是一个无火的余烬，但是通过不断的努力我能不断的成长，能和比我强很多倍的boss谈笑风声。 《辐射》 war, war never changes ——我玩过的《辐射4》和《辐射拉斯维加斯》的开头里面都有这句话，仔细一想这不就反应的辐射游戏的主题吗：即使在核战争过后，人们并没有从中吸取教训，仍旧因为意识形态的不同而纷争不断。（典型如学院、钢铁兄弟会、铁路之间非要弄得你死我活） 《仙剑4》 人生如一场虚空大梦，韶华白首，不过转瞬，唯有天道恒在，循环往复，不曾更改。 ——来自于与《仙剑4》结局动画慕容紫英说的，当时真的被感动的不行。高中的时候家里面和学校都管得很严，没有办法玩游戏，仙剑4作为进入大学后我第一个玩的单机游戏，从此带我进入了单机游戏的大坑。 《古剑1》 天下之之柔，驰骋天下之之坚，与剑术之道，你已悟得，我没有什么可教你的。此一战，紫胤真人阻不了百里屠苏，自行下山去吧。 ——来自于古剑1快结尾后，紫胤真人和百里屠苏的比武切磋之后说的，非常喜欢当时紫胤真人说话的气势，配音也超级好。 《尼尔机械纪元》 “这里是寄叶部队的2B……如果有人听到这封留言，我希望……你能帮忙转达……若你遇见寄叶部队的9S……我……想告诉他……抱歉，要给他的讯息是……9S，与你共度的日子……对我而言……是最灿烂的回忆……谢谢你……9……S……”]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[番剧推荐]]></title>
    <url>%2F2017%2F12%2F30%2F%E7%95%AA%E5%89%A7%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[我不喜欢给自己贴上宅男的表情，自己也算不上什么宅男。但是自己确实是一个游戏+漫画+番剧+电影的爱好者,要不我的博客为什么都用女生当头像呢？作为自己的博客，这篇文章将自己喜欢的番剧并加上自己的简评，满分10分。 《刀剑神域》评分：8分观后感：这个周（2017/9/15）刀剑神域的剧场即将在中国上映，花了两天把刀剑神域第一部看完。除了女主角亚斯娜是我喜欢的类型，以外其他的地方真的喜欢不起来。作为一个科幻背景的动画片，并没有将VRMMO中科幻这个背景作为更深层次的讨论，还停留在主角“打怪练级”的层次上面，全篇的主线存在感不强。整个第一部看点之一就是主角和众多女角色的后宫戏了。 《叛逆的鲁鲁修》 《新世纪福音战士》 《fate/stay night》 待更]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux软件自动安装脚本]]></title>
    <url>%2F2017%2F12%2F30%2FLinux%E8%BD%AF%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[当你购买了一台云主机的时候，不管你是用作什么。一些Linux命令行工具和开发环境都是必备的，为了免去自动安装的烦恼，我这里写了一个自动安装的脚本,将脚本拷贝到一个文件里面如:Install.sh,用法：12$chmod u+x Install.sh$sh Install.sh Linux常用软件/环境 man 一般来说这个工具是Linux自带的，有时也需要自己手动添加，用于查看帮助 vim 一个强大的文本编辑器，vi的扩展 git 可以理解为Github的客户端，方便你去github下载东西 tree 显示你的目录的树形结构 gcc c语言编译器 gcc-c++ c++编译器 uzip zip解压工具 mysql 常用数据库 自动安装脚本1234567891011121314151617181920212223242526272829303132333435363738394041!/bin/bash#Linux常用命令/软件自动安装脚本echo "Linux内核信息："uname -aecho "CentOS版本信息"cat /etc/centos-release#rpm -q centos-releasepakage_list=(man vim git tree gcc gcc-c++ unzip mysql)#用于检查rpm包是否安装的函数check_rpm()&#123; pakage_name=$1 echo "======================================================================================" echo "正在检查软件包：$1 是否安装" if [[ $(rpm -qa $pakage_name)] == *$pakage_name* ]];then echo -e "\e[33m Pakege $pakage_name 已经安装 \e[0m" elif [[ $(rpm -qa|grep $pakage_name) == *$pakage_name* ]];then echo -e "\e[33m Pakege $pakage_name 已经安装 \e[0m" else echo -e "\e[42m Pakege $pakage_name 未安装 \e[0m" echo -e "\e[34m 正在安装 $pakage_name ... \e[0m" yum install -y -q $pakage_name if [ $? -eq 0 ] then echo "Pakege $pakage_name 安装成功" else echo -e "\e[31m Pakege $pakage_name 安装失败 \e[0m" fi fi&#125;Test=git#check_rpm $Testfor pakage in $&#123;pakage_list[@]&#125;do check_rpm $&#123;pakage&#125;doneexit 0 待更： 添加java自动安装程序 添加nodejs自动安装程序]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim配置文件示例]]></title>
    <url>%2F2017%2F12%2F30%2FVim%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[初用vim有几点地方是必须更改的：字符集、Tab缩进、高亮。下面总结了一个简单的vim配置文件 首先12cd ~touch vimrc 填入如下内容1234567891011121314151617181920212223242526272829303132333435363738394041&quot; 文件编码set fileencoding=utf-8set encoding=utf-8set termencoding=utf-8​&quot; 开启语法高亮syntax enable​&quot; 防止在文件末尾追加换行符set noendoflineset binary​&quot; 制表宽度set softtabstop=4set tabstop=4set shiftwidth=4set expandtab​&quot; 自动缩进对齐set autoindent​&quot; 显示行号&quot; set nu​&quot; 设置背景, 影响vim显示&quot;set bg=dark​&quot; 代码折叠&quot; set foldmethod=indent​&quot; backspace功能set backspace=indent,eol,start​&quot; 总是显示tab栏, 需要vim7&quot; set showtabline=2​&quot; 高亮搜索词set hlsearch​&quot; 显示光标所在行号set ruler 更为复杂的暂时用不到，待更]]></content>
      <tags>
        <tag>软件配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仙剑4通关有感]]></title>
    <url>%2F2017%2F12%2F30%2F%E4%BB%99%E5%89%914%E9%80%9A%E5%85%B3%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这篇文章主要内容写成于2013/2/6日，是在前不久整理电脑发现的，没想到还遗留在自己的电脑之中，文字略显幼稚，原来将这篇文章是发在自己的浪博客上面今天就顺便把它搬到自己的博客上吧。 今日之感以今天的眼光来看，2007年的仙剑4只能算是一个素质中等游戏。只是单年初次单机单机游戏的坑觉得游戏里面的一些东西很惊艳，现在看来当年写的有点幼稚。为什么这么说呢？因为2007就和今年一样是一个神作井喷的年代，我们来看2007年都出过那些比较出名的游戏呢 巫师1。巫师系列，最新一部《巫师3》可能是目前为止最伟大的RPG游戏。 神秘海域1。这个游戏去年出了系列最后一部，是去年玩家心目中的准年度最佳游戏。 女神异闻录3。今年出了续作《女神异闻录5》，今年最好的JRPG游戏。 质量效应1。巫师之前最好的RPG，质量效应三部曲开创一个宏大的太空歌剧。 生化危机4。今年出了《生化危机7》，第七部我不喜欢也没有买，但是当年生化4当年我玩了不下5遍。 军团要塞2。没错就是守望先锋借鉴的那一个。 超级马里奥银河。这个游戏至今仍然在game rankings游戏评分排名前5，非常恐怖！ 战神3 光环3。这个不用说了吧，微软的看家FPS。 使命召唤4，最伟大的一部使命召唤 生化奇兵 孤岛危机 魔兽世界燃烧的远征 这些IP左右了全球游戏行业近10年的发展。 那对于《仙剑4》来说，优点又有哪些呢？优点： 剧情感人。 世界观宏大。 在国产游戏，质量做到了中上。 迷宫做的还行。 以下是当年我写的通关有感： 仙剑4通关有感&ensp;&ensp;&ensp;&ensp;怎么说呢，仙剑四是我打完的第一部RPG游戏，好歹也要写一篇文章纪念一下。放假在家闲着无聊，只有靠看电影打发时间；突然有一天，心血来潮，就去下载了仙剑四。下面主要从仙剑4的风景、人物、剧情以及国产单机游戏现状来展开这一篇文章。 &ensp;&ensp;&ensp;&ensp;因为没有接触多少单机游戏的原因，在我看来游戏中的人物风景还是做的美轮美奂的了，说说印象最深的几个场景吧。杜甫诗云：会当凌绝顶，一览众山小；云天河在青鸾峰上往下眺望虽然说只能看见一片白色，毫无远景可言。但是看着周围的一切：小溪流水，山顶人家。足够让人心旷神怡的了，要我说在周围的一切的衬托下，这难道不是人间仙境吗？仙剑制作者一定汲取了中国山水画的优点吧，而水墨山水画也恰恰是我喜欢的。第二处是即墨的还海景，俗话说：仁者乐山，智者乐水。难道我是智者？（偷笑）平静的海边，悠闲的人们，当然最让我眼前一亮的是沙滩上的阳光：给人一种暖暖的感觉，生活在其中一定是非常悠闲。比起青鸾峰上好的就是这里可以看见海中远景，为一遗憾的是这里缺少往来的船只；要不让还真是有一种孤帆远影碧空尽，唯见长江天际流的感觉。第三处当之无愧的是不周山的天空，阴沉阴沉真的是有点恐怖！下面怪石从生，上面的云朵能透出点点光芒要我说这就是把现实中的天空贴上去以后形成的效果，不过哈阴暗的气氛还真是适合云天河要去地狱去寻找影翳枝的剧情。 &ensp;&ensp;&ensp;&ensp;云天河“天若悬河”自小住在山上，真是过着一种神仙般的生活啊。整个游戏中他给我的印象就是涉世未深，憨厚老实，正直勇敢，坦率直白；为了弄清爹娘的事随着韩菱纱下山，为了凌霄去寻找三寒器，为了柳梦璃而闯鬼界，为了山下的人民免受九天玄女的处罚而逆天而行最终导致双目失明…。在我印象中云天河说的话令我印象最深是：“我命在我不在天！”，难道真是如此吗？或许吧！总的来说在现在的社会里找不出这样的人是肯定的。韩菱纱呢？最开始看到这位女主角还真是令人眼前一亮啊！连我都不得不赞叹还真是漂亮，话说我又没有看过多少美女，要么这么说我看过太多美女！很矛盾吧，其实不然。只要你打开浏览器输入美女，一下子就能跳出来N多“美女”不是吗？但是她们真的很美吗？仁者见仁，智者见智吧。但有一点是肯定的，她们看多了以后就不会再美丽也没有东西让她们继续美丽，美丽的或许是是美丽本身，但是让美丽继续美丽的必然是事物本身！不是吗？菱纱的性格倒是和仙剑3里面的雪见有点相似，面对自己只有所剩不多的阳寿任然乐观，她所做的事更加突出了她的美丽吧！再来谈一谈梦璃吧，她给人的感觉总是带有淡淡的忧伤，与天河有缘无份真是一个悲剧。“谁言别后终无悔，寒月清宵寄梦回；深知心在情常在，前程不共彩云飞。”多么优美的诗句啊，暗含了别后淡淡的忧伤。“留”“梦”“离”，知道她名字的深意了吧！最后谈一谈慕容紫英，这一为主角出现在游戏的中期，我对他来说也没有多的印象，对他来说关键词就是转变吧：从一个对妖恨之入骨的琼华派弟子，在天河的影响下彻底改变，为了保护幻暝界，保护梦璃而不惜和琼华派作对。要说网上流传的他对韩菱纱的爱慕之情，我可是一点都没有看出来。 &ensp;&ensp;&ensp;&ensp;要说为什么去下载仙剑4的原因，当然是百度了一下，很多人都说仙剑4的剧情是倍经典。那我就来谈一谈三个地方吧：第一是琼华派的修仙之法，刚开始接触游戏中的妖界时，第一反应就是最后的boss肯定就是什么的妖界之王什么的，这样难免使剧情落入俗套。然而后续剧情确实惊艳！琼华派的修仙之法就是利用伏羲望舒两剑，束缚妖界以夺取其灵力来达到自己白日飞升的目的。没想到最后的剧情来了这么大反转，我不禁感叹人们为了自己的私欲还真是什么事都干得出来啊，而且还不忘为之编造一个堂而皇之的目的“除魔卫道”。难道我们的世界不是一样吗？第二一个是九天玄女所说的天道，“天神只是天道的执行者而不是天道的制定者”这个想法很是新颖，“天河的一句我命由我不由天！逆天而行，拉动后裔射日弓射下即将坠下的琼华派”，然而殊不知道这也是天道的一部分，就像那句被说厌的台词“冥冥之中自有天意”。要说最令我难忘要数那个令人感伤的结尾的，100年后…紫英白发苍苍对赶来的梦璃说“你来了”“无所谓好或不好，人生不过一场虚空大梦，韶华白首不过转瞬”随后御剑而走，尤其是后一句真是令人感伤啊！就像断臂的维纳斯一样，仙剑4的结尾有一种残缺美 ，留给我们无尽的想象空间。天河所住房子旁有两所墓，一所是韩菱纱的，一所是或许是他为自己留的吧！在烛龙之息的保护下，天河百年未老，但是终究要归于尘土。在网上看见一种很是恶搞的说法那所坟墓是上海软星自己的…… &ensp;&ensp;&ensp;&ensp;在当代的中国人们缺乏对知识产权应有的尊重，各种盗版横行于世，不得不说是一种悲剧。(汗！我也是玩的盗版仙剑4)上海软星解散的原因虽然复杂，但是盗版绝对是原因之一。但是呢，事情总归是慢慢变的的嘛！ 后记所以我早早入坑steam啦，从此和盗版说拜拜，而仙剑4已经于2017-9-6号在steam上发售，所以可以补票了！]]></content>
      <tags>
        <tag>游戏评测</tag>
        <tag>游戏心得</tag>
      </tags>
  </entry>
</search>
